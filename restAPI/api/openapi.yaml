openapi: 3.0.0
info:
  title: Swagger Bookstore
  description: |
    This is a sample Bookstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/moonmacrosystems/Books/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://bookstore.swagger.io/v2
tags:
- name: book
  description: Everything about your Books
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /book:
    get:
      tags:
      - book
      summary: List books
      description: Returns an array of books
      operationId: listBook
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
      - api_key: []
      x-swagger-router-controller: Book
    post:
      tags:
      - book
      summary: Add a new book to the store
      operationId: addBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        "405":
          description: Invalid input
      security:
      - bookstore_auth:
        - write:books
        - read:books
      x-swagger-router-controller: Book
  /book/{bookId}:
    get:
      tags:
      - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
      - name: bookId
        in: path
        description: ID of book to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
      - api_key: []
      x-swagger-router-controller: Book
    delete:
      tags:
      - book
      summary: Deletes a book
      operationId: deleteBook
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: bookId
        in: path
        description: Book id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
      - bookstore_auth:
        - write:books
        - read:books
      x-swagger-router-controller: Book
components:
  schemas:
    Book:
      required:
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: doggie
        author:
          type: string
      example:
        author: author
        id: 0
        title: doggie
      xml:
        name: Book
  requestBodies:
    Book:
      description: Book object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
        application/xml:
          schema:
            $ref: '#/components/schemas/Book'
      required: true
  securitySchemes:
    bookstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://bookstore.swagger.io/oauth/dialog
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header
